{"$message_type":"future_incompat","future_incompat_report":[{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/unknown.rs","byte_start":208,"byte_end":2243,"line_start":11,"line_end":41,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    /// Insert complete object and deleting destructor on non-Windows platforms, where Dxc shims IUnknown in WinAdapter.","highlight_start":1,"highlight_end":121},{"text":"    /// This requires a virtual destructor (delete is actually used on the base class) which unfortunately makes the struct","highlight_start":1,"highlight_end":124},{"text":"    /// binary incompatible.","highlight_start":1,"highlight_end":29},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// See the third and fourth entry:","highlight_start":1,"highlight_end":40},{"text":"    /// ```cmd","highlight_start":1,"highlight_end":15},{"text":"    /// vtable for 'DxcLibrary' @ 0x7ffff7cbc5f8 (subobject @ 0x5555556bb9e0):","highlight_start":1,"highlight_end":79},{"text":"    /// [0]: 0x7ffff6a56d40 <DxcLibrary::QueryInterface(_GUID const&, void**)>","highlight_start":1,"highlight_end":79},{"text":"    /// [1]: 0x7ffff6a56d20 <DxcLibrary::AddRef()>","highlight_start":1,"highlight_end":51},{"text":"    /// [2]: 0x7ffff6a56d30 <DxcLibrary::Release()>","highlight_start":1,"highlight_end":52},{"text":"    /// [3]: 0x7ffff6b36bc0 <IUnknown::~IUnknown()>","highlight_start":1,"highlight_end":52},{"text":"    /// [4]: 0x7ffff6a57130 <DxcLibrary::~DxcLibrary()>","highlight_start":1,"highlight_end":56},{"text":"    /// [5]: 0x7ffff6a56d50 <DxcLibrary::SetMalloc(IMalloc*)>","highlight_start":1,"highlight_end":62},{"text":"    /// [6]: 0x7ffff6a56d60 <DxcLibrary::CreateBlobFromBlob(IDxcBlob*, unsigned int, unsigned int, IDxcBlob**)>","highlight_start":1,"highlight_end":112},{"text":"    /// [7]: 0x7ffff6a56d70 <DxcLibrary::CreateBlobFromFile(wchar_t const*, unsigned int*, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":112},{"text":"    /// [8]: 0x7ffff6a56d80 <DxcLibrary::CreateBlobWithEncodingFromPinned(void const*, unsigned int, unsigned int, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":136},{"text":"    /// [9]: 0x7ffff6a56d90 <DxcLibrary::CreateBlobWithEncodingOnHeapCopy(void const*, unsigned int, unsigned int, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":136},{"text":"    /// [10]: 0x7ffff6a56da0 <DxcLibrary::CreateBlobWithEncodingOnMalloc(void const*, IMalloc*, unsigned int, unsigned int, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":145},{"text":"    /// [11]: 0x7ffff6a56db0 <DxcLibrary::CreateIncludeHandler(IDxcIncludeHandler**)>","highlight_start":1,"highlight_end":86},{"text":"    /// [12]: 0x7ffff6a56dc0 <DxcLibrary::CreateStreamFromBlobReadOnly(IDxcBlob*, IStream**)>","highlight_start":1,"highlight_end":94},{"text":"    /// [13]: 0x7ffff6a56dd0 <DxcLibrary::GetBlobAsUtf8(IDxcBlob*, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":88},{"text":"    /// [14]: 0x7ffff6a56e90 <DxcLibrary::GetBlobAsUtf16(IDxcBlob*, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":89},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    interface IDxcUnknownShim: IUnknown {","highlight_start":1,"highlight_end":42},{"text":"        iid: IID_IUnknown,","highlight_start":1,"highlight_end":27},{"text":"        vtable: IDxcUnknownShimVtbl,","highlight_start":1,"highlight_end":37},{"text":"        fn complete_object_destructor() -> HRESULT;","highlight_start":1,"highlight_end":52},{"text":"        fn deleting_destructor() -> HRESULT;","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/unknown.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Insert complete object and deleting destructor on non-Windows \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// This requires a virtual destructor (delete is actually used on\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// binary incompatible.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/unknown.rs","byte_start":208,"byte_end":2243,"line_start":11,"line_end":41,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    /// Insert complete object and deleting destructor on non-Windows platforms, where Dxc shims IUnknown in WinAdapter.","highlight_start":1,"highlight_end":121},{"text":"    /// This requires a virtual destructor (delete is actually used on the base class) which unfortunately makes the struct","highlight_start":1,"highlight_end":124},{"text":"    /// binary incompatible.","highlight_start":1,"highlight_end":29},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// See the third and fourth entry:","highlight_start":1,"highlight_end":40},{"text":"    /// ```cmd","highlight_start":1,"highlight_end":15},{"text":"    /// vtable for 'DxcLibrary' @ 0x7ffff7cbc5f8 (subobject @ 0x5555556bb9e0):","highlight_start":1,"highlight_end":79},{"text":"    /// [0]: 0x7ffff6a56d40 <DxcLibrary::QueryInterface(_GUID const&, void**)>","highlight_start":1,"highlight_end":79},{"text":"    /// [1]: 0x7ffff6a56d20 <DxcLibrary::AddRef()>","highlight_start":1,"highlight_end":51},{"text":"    /// [2]: 0x7ffff6a56d30 <DxcLibrary::Release()>","highlight_start":1,"highlight_end":52},{"text":"    /// [3]: 0x7ffff6b36bc0 <IUnknown::~IUnknown()>","highlight_start":1,"highlight_end":52},{"text":"    /// [4]: 0x7ffff6a57130 <DxcLibrary::~DxcLibrary()>","highlight_start":1,"highlight_end":56},{"text":"    /// [5]: 0x7ffff6a56d50 <DxcLibrary::SetMalloc(IMalloc*)>","highlight_start":1,"highlight_end":62},{"text":"    /// [6]: 0x7ffff6a56d60 <DxcLibrary::CreateBlobFromBlob(IDxcBlob*, unsigned int, unsigned int, IDxcBlob**)>","highlight_start":1,"highlight_end":112},{"text":"    /// [7]: 0x7ffff6a56d70 <DxcLibrary::CreateBlobFromFile(wchar_t const*, unsigned int*, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":112},{"text":"    /// [8]: 0x7ffff6a56d80 <DxcLibrary::CreateBlobWithEncodingFromPinned(void const*, unsigned int, unsigned int, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":136},{"text":"    /// [9]: 0x7ffff6a56d90 <DxcLibrary::CreateBlobWithEncodingOnHeapCopy(void const*, unsigned int, unsigned int, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":136},{"text":"    /// [10]: 0x7ffff6a56da0 <DxcLibrary::CreateBlobWithEncodingOnMalloc(void const*, IMalloc*, unsigned int, unsigned int, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":145},{"text":"    /// [11]: 0x7ffff6a56db0 <DxcLibrary::CreateIncludeHandler(IDxcIncludeHandler**)>","highlight_start":1,"highlight_end":86},{"text":"    /// [12]: 0x7ffff6a56dc0 <DxcLibrary::CreateStreamFromBlobReadOnly(IDxcBlob*, IStream**)>","highlight_start":1,"highlight_end":94},{"text":"    /// [13]: 0x7ffff6a56dd0 <DxcLibrary::GetBlobAsUtf8(IDxcBlob*, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":88},{"text":"    /// [14]: 0x7ffff6a56e90 <DxcLibrary::GetBlobAsUtf16(IDxcBlob*, IDxcBlobEncoding**)>","highlight_start":1,"highlight_end":89},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    interface IDxcUnknownShim: IUnknown {","highlight_start":1,"highlight_end":42},{"text":"        iid: IID_IUnknown,","highlight_start":1,"highlight_end":27},{"text":"        vtable: IDxcUnknownShimVtbl,","highlight_start":1,"highlight_end":37},{"text":"        fn complete_object_destructor() -> HRESULT;","highlight_start":1,"highlight_end":52},{"text":"        fn deleting_destructor() -> HRESULT;","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/unknown.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Insert complete object and deleting destructor on non-Windows \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// This requires a virtual destructor (delete is actually used on\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// binary incompatible.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":728,"byte_end":955,"line_start":22,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcBlob: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":52},{"text":"        iid: IID_IDxcBlob,","highlight_start":1,"highlight_end":27},{"text":"        vtable: IDxcBlobVtbl,","highlight_start":1,"highlight_end":30},{"text":"        fn get_buffer_pointer() -> *mut c_void;","highlight_start":1,"highlight_end":48},{"text":"        fn get_buffer_size() -> usize;","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:22:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcBlob: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcBlob,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcBlobVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":728,"byte_end":955,"line_start":22,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcBlob: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":52},{"text":"        iid: IID_IDxcBlob,","highlight_start":1,"highlight_end":27},{"text":"        vtable: IDxcBlobVtbl,","highlight_start":1,"highlight_end":30},{"text":"        fn get_buffer_pointer() -> *mut c_void;","highlight_start":1,"highlight_end":48},{"text":"        fn get_buffer_size() -> usize;","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:22:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcBlob: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcBlob,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcBlobVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":1070,"byte_end":1317,"line_start":32,"line_end":38,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcBlobEncoding: IDxcBlob, IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":70},{"text":"        iid: IID_IDxcBlobEncoding,","highlight_start":1,"highlight_end":35},{"text":"        vtable: IDxcBlobEncodingVtbl,","highlight_start":1,"highlight_end":38},{"text":"        fn get_encoding(known: *mut u32, code_page: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:32:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcBlobEncoding: IDxcBlob, IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcBlobEncoding,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcBlobEncodingVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":1427,"byte_end":2816,"line_start":41,"line_end":56,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLibrary: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":55},{"text":"        iid: IID_IDxcLibrary,","highlight_start":1,"highlight_end":30},{"text":"        vtable: IDxcLibraryVtbl,","highlight_start":1,"highlight_end":33},{"text":"        fn set_malloc(malloc: *const c_void) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn create_blob_from_blob(blob: *const IDxcBlob, offset: u32, length: u32, result_blob: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":127},{"text":"        fn create_blob_from_file(filename: LPCWSTR, code_page: *const u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":130},{"text":"        fn create_blob_with_encoding_from_pinned(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":152},{"text":"        fn create_blob_with_encoding_on_heap_copy(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":153},{"text":"        fn create_blob_with_encoding_on_malloc(text: *const c_void, malloc: /* IMalloc */ *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":187},{"text":"        fn create_include_handler(include_handler: *mut *mut IDxcIncludeHandler) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn create_stream_from_blob_read_only(blob: *const IDxcBlob, stream: /* IStream */ *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_blob_as_utf8(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":106},{"text":"        fn get_blob_as_utf16(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:41:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLibrary: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLibrary,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLibraryVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":1427,"byte_end":2816,"line_start":41,"line_end":56,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLibrary: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":55},{"text":"        iid: IID_IDxcLibrary,","highlight_start":1,"highlight_end":30},{"text":"        vtable: IDxcLibraryVtbl,","highlight_start":1,"highlight_end":33},{"text":"        fn set_malloc(malloc: *const c_void) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn create_blob_from_blob(blob: *const IDxcBlob, offset: u32, length: u32, result_blob: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":127},{"text":"        fn create_blob_from_file(filename: LPCWSTR, code_page: *const u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":130},{"text":"        fn create_blob_with_encoding_from_pinned(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":152},{"text":"        fn create_blob_with_encoding_on_heap_copy(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":153},{"text":"        fn create_blob_with_encoding_on_malloc(text: *const c_void, malloc: /* IMalloc */ *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":187},{"text":"        fn create_include_handler(include_handler: *mut *mut IDxcIncludeHandler) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn create_stream_from_blob_read_only(blob: *const IDxcBlob, stream: /* IStream */ *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_blob_as_utf8(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":106},{"text":"        fn get_blob_as_utf16(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:41:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLibrary: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLibrary,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLibraryVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":1427,"byte_end":2816,"line_start":41,"line_end":56,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLibrary: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":55},{"text":"        iid: IID_IDxcLibrary,","highlight_start":1,"highlight_end":30},{"text":"        vtable: IDxcLibraryVtbl,","highlight_start":1,"highlight_end":33},{"text":"        fn set_malloc(malloc: *const c_void) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn create_blob_from_blob(blob: *const IDxcBlob, offset: u32, length: u32, result_blob: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":127},{"text":"        fn create_blob_from_file(filename: LPCWSTR, code_page: *const u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":130},{"text":"        fn create_blob_with_encoding_from_pinned(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":152},{"text":"        fn create_blob_with_encoding_on_heap_copy(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":153},{"text":"        fn create_blob_with_encoding_on_malloc(text: *const c_void, malloc: /* IMalloc */ *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":187},{"text":"        fn create_include_handler(include_handler: *mut *mut IDxcIncludeHandler) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn create_stream_from_blob_read_only(blob: *const IDxcBlob, stream: /* IStream */ *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_blob_as_utf8(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":106},{"text":"        fn get_blob_as_utf16(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:41:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLibrary: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLibrary,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLibraryVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":1427,"byte_end":2816,"line_start":41,"line_end":56,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLibrary: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":55},{"text":"        iid: IID_IDxcLibrary,","highlight_start":1,"highlight_end":30},{"text":"        vtable: IDxcLibraryVtbl,","highlight_start":1,"highlight_end":33},{"text":"        fn set_malloc(malloc: *const c_void) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn create_blob_from_blob(blob: *const IDxcBlob, offset: u32, length: u32, result_blob: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":127},{"text":"        fn create_blob_from_file(filename: LPCWSTR, code_page: *const u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":130},{"text":"        fn create_blob_with_encoding_from_pinned(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":152},{"text":"        fn create_blob_with_encoding_on_heap_copy(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":153},{"text":"        fn create_blob_with_encoding_on_malloc(text: *const c_void, malloc: /* IMalloc */ *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":187},{"text":"        fn create_include_handler(include_handler: *mut *mut IDxcIncludeHandler) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn create_stream_from_blob_read_only(blob: *const IDxcBlob, stream: /* IStream */ *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_blob_as_utf8(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":106},{"text":"        fn get_blob_as_utf16(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:41:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLibrary: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLibrary,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLibraryVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":1427,"byte_end":2816,"line_start":41,"line_end":56,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLibrary: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":55},{"text":"        iid: IID_IDxcLibrary,","highlight_start":1,"highlight_end":30},{"text":"        vtable: IDxcLibraryVtbl,","highlight_start":1,"highlight_end":33},{"text":"        fn set_malloc(malloc: *const c_void) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn create_blob_from_blob(blob: *const IDxcBlob, offset: u32, length: u32, result_blob: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":127},{"text":"        fn create_blob_from_file(filename: LPCWSTR, code_page: *const u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":130},{"text":"        fn create_blob_with_encoding_from_pinned(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":152},{"text":"        fn create_blob_with_encoding_on_heap_copy(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":153},{"text":"        fn create_blob_with_encoding_on_malloc(text: *const c_void, malloc: /* IMalloc */ *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":187},{"text":"        fn create_include_handler(include_handler: *mut *mut IDxcIncludeHandler) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn create_stream_from_blob_read_only(blob: *const IDxcBlob, stream: /* IStream */ *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_blob_as_utf8(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":106},{"text":"        fn get_blob_as_utf16(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:41:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLibrary: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLibrary,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLibraryVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":1427,"byte_end":2816,"line_start":41,"line_end":56,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLibrary: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":55},{"text":"        iid: IID_IDxcLibrary,","highlight_start":1,"highlight_end":30},{"text":"        vtable: IDxcLibraryVtbl,","highlight_start":1,"highlight_end":33},{"text":"        fn set_malloc(malloc: *const c_void) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn create_blob_from_blob(blob: *const IDxcBlob, offset: u32, length: u32, result_blob: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":127},{"text":"        fn create_blob_from_file(filename: LPCWSTR, code_page: *const u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":130},{"text":"        fn create_blob_with_encoding_from_pinned(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":152},{"text":"        fn create_blob_with_encoding_on_heap_copy(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":153},{"text":"        fn create_blob_with_encoding_on_malloc(text: *const c_void, malloc: /* IMalloc */ *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":187},{"text":"        fn create_include_handler(include_handler: *mut *mut IDxcIncludeHandler) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn create_stream_from_blob_read_only(blob: *const IDxcBlob, stream: /* IStream */ *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_blob_as_utf8(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":106},{"text":"        fn get_blob_as_utf16(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:41:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLibrary: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLibrary,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLibraryVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":1427,"byte_end":2816,"line_start":41,"line_end":56,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLibrary: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":55},{"text":"        iid: IID_IDxcLibrary,","highlight_start":1,"highlight_end":30},{"text":"        vtable: IDxcLibraryVtbl,","highlight_start":1,"highlight_end":33},{"text":"        fn set_malloc(malloc: *const c_void) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn create_blob_from_blob(blob: *const IDxcBlob, offset: u32, length: u32, result_blob: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":127},{"text":"        fn create_blob_from_file(filename: LPCWSTR, code_page: *const u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":130},{"text":"        fn create_blob_with_encoding_from_pinned(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":152},{"text":"        fn create_blob_with_encoding_on_heap_copy(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":153},{"text":"        fn create_blob_with_encoding_on_malloc(text: *const c_void, malloc: /* IMalloc */ *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":187},{"text":"        fn create_include_handler(include_handler: *mut *mut IDxcIncludeHandler) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn create_stream_from_blob_read_only(blob: *const IDxcBlob, stream: /* IStream */ *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_blob_as_utf8(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":106},{"text":"        fn get_blob_as_utf16(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:41:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLibrary: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLibrary,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLibraryVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":1427,"byte_end":2816,"line_start":41,"line_end":56,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLibrary: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":55},{"text":"        iid: IID_IDxcLibrary,","highlight_start":1,"highlight_end":30},{"text":"        vtable: IDxcLibraryVtbl,","highlight_start":1,"highlight_end":33},{"text":"        fn set_malloc(malloc: *const c_void) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn create_blob_from_blob(blob: *const IDxcBlob, offset: u32, length: u32, result_blob: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":127},{"text":"        fn create_blob_from_file(filename: LPCWSTR, code_page: *const u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":130},{"text":"        fn create_blob_with_encoding_from_pinned(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":152},{"text":"        fn create_blob_with_encoding_on_heap_copy(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":153},{"text":"        fn create_blob_with_encoding_on_malloc(text: *const c_void, malloc: /* IMalloc */ *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":187},{"text":"        fn create_include_handler(include_handler: *mut *mut IDxcIncludeHandler) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn create_stream_from_blob_read_only(blob: *const IDxcBlob, stream: /* IStream */ *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_blob_as_utf8(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":106},{"text":"        fn get_blob_as_utf16(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:41:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLibrary: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLibrary,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLibraryVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":1427,"byte_end":2816,"line_start":41,"line_end":56,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLibrary: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":55},{"text":"        iid: IID_IDxcLibrary,","highlight_start":1,"highlight_end":30},{"text":"        vtable: IDxcLibraryVtbl,","highlight_start":1,"highlight_end":33},{"text":"        fn set_malloc(malloc: *const c_void) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn create_blob_from_blob(blob: *const IDxcBlob, offset: u32, length: u32, result_blob: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":127},{"text":"        fn create_blob_from_file(filename: LPCWSTR, code_page: *const u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":130},{"text":"        fn create_blob_with_encoding_from_pinned(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":152},{"text":"        fn create_blob_with_encoding_on_heap_copy(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":153},{"text":"        fn create_blob_with_encoding_on_malloc(text: *const c_void, malloc: /* IMalloc */ *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":187},{"text":"        fn create_include_handler(include_handler: *mut *mut IDxcIncludeHandler) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn create_stream_from_blob_read_only(blob: *const IDxcBlob, stream: /* IStream */ *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_blob_as_utf8(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":106},{"text":"        fn get_blob_as_utf16(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:41:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLibrary: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLibrary,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLibraryVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":1427,"byte_end":2816,"line_start":41,"line_end":56,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLibrary: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":55},{"text":"        iid: IID_IDxcLibrary,","highlight_start":1,"highlight_end":30},{"text":"        vtable: IDxcLibraryVtbl,","highlight_start":1,"highlight_end":33},{"text":"        fn set_malloc(malloc: *const c_void) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn create_blob_from_blob(blob: *const IDxcBlob, offset: u32, length: u32, result_blob: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":127},{"text":"        fn create_blob_from_file(filename: LPCWSTR, code_page: *const u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":130},{"text":"        fn create_blob_with_encoding_from_pinned(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":152},{"text":"        fn create_blob_with_encoding_on_heap_copy(text: *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":153},{"text":"        fn create_blob_with_encoding_on_malloc(text: *const c_void, malloc: /* IMalloc */ *const c_void, size: u32, code_page: u32, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":187},{"text":"        fn create_include_handler(include_handler: *mut *mut IDxcIncludeHandler) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn create_stream_from_blob_read_only(blob: *const IDxcBlob, stream: /* IStream */ *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_blob_as_utf8(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":106},{"text":"        fn get_blob_as_utf16(blob: *const IDxcBlob, blob_encoding: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:41:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLibrary: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLibrary,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLibraryVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":2934,"byte_end":3298,"line_start":59,"line_end":67,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcOperationResult: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcOperationResult,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcOperationResultVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_status(status: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":52},{"text":"        fn get_result(result: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":62},{"text":"        fn get_error_buffer(errors: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":76},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:59:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcOperationResult: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcOperationResult,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcOperationResultVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":2934,"byte_end":3298,"line_start":59,"line_end":67,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcOperationResult: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcOperationResult,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcOperationResultVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_status(status: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":52},{"text":"        fn get_result(result: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":62},{"text":"        fn get_error_buffer(errors: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":76},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:59:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcOperationResult: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcOperationResult,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcOperationResultVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":2934,"byte_end":3298,"line_start":59,"line_end":67,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcOperationResult: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcOperationResult,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcOperationResultVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_status(status: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":52},{"text":"        fn get_result(result: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":62},{"text":"        fn get_error_buffer(errors: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":76},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:59:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcOperationResult: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcOperationResult,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcOperationResultVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":3415,"byte_end":3674,"line_start":70,"line_end":76,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcIncludeHandler: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":62},{"text":"        iid: IID_IDxcIncludeHandler,","highlight_start":1,"highlight_end":37},{"text":"        vtable: IDxcIncludeHandlerVtbl,","highlight_start":1,"highlight_end":40},{"text":"        fn load_source(filename: LPCWSTR, include_source: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":90},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:70:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcIncludeHandler: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcIncludeHandler,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcIncludeHandlerVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":3893,"byte_end":4952,"line_start":86,"line_end":116,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCompiler: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":56},{"text":"        iid: IID_IDxcCompiler,","highlight_start":1,"highlight_end":31},{"text":"        vtable: IDxcCompilerVtbl,","highlight_start":1,"highlight_end":34},{"text":"        fn compile(","highlight_start":1,"highlight_end":20},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            source_name: LPCWSTR,","highlight_start":1,"highlight_end":34},{"text":"            entry_point: LPCWSTR,","highlight_start":1,"highlight_end":34},{"text":"            target_profile: LPCWSTR,","highlight_start":1,"highlight_end":37},{"text":"            arguments: *const LPCWSTR,","highlight_start":1,"highlight_end":39},{"text":"            arg_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            defines: *const DxcDefine,","highlight_start":1,"highlight_end":39},{"text":"            def_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            include_handler: *const IDxcIncludeHandler,","highlight_start":1,"highlight_end":56},{"text":"            result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn preprocess(","highlight_start":1,"highlight_end":23},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            source_name: LPCWSTR,","highlight_start":1,"highlight_end":34},{"text":"            arguments: *const LPCWSTR,","highlight_start":1,"highlight_end":39},{"text":"            arg_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            defines: *const DxcDefine,","highlight_start":1,"highlight_end":39},{"text":"            def_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            include_handler: *const IDxcIncludeHandler,","highlight_start":1,"highlight_end":56},{"text":"            result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn disassemble(","highlight_start":1,"highlight_end":24},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            disassembly: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:86:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCompiler: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCompiler,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCompilerVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":3893,"byte_end":4952,"line_start":86,"line_end":116,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCompiler: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":56},{"text":"        iid: IID_IDxcCompiler,","highlight_start":1,"highlight_end":31},{"text":"        vtable: IDxcCompilerVtbl,","highlight_start":1,"highlight_end":34},{"text":"        fn compile(","highlight_start":1,"highlight_end":20},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            source_name: LPCWSTR,","highlight_start":1,"highlight_end":34},{"text":"            entry_point: LPCWSTR,","highlight_start":1,"highlight_end":34},{"text":"            target_profile: LPCWSTR,","highlight_start":1,"highlight_end":37},{"text":"            arguments: *const LPCWSTR,","highlight_start":1,"highlight_end":39},{"text":"            arg_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            defines: *const DxcDefine,","highlight_start":1,"highlight_end":39},{"text":"            def_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            include_handler: *const IDxcIncludeHandler,","highlight_start":1,"highlight_end":56},{"text":"            result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn preprocess(","highlight_start":1,"highlight_end":23},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            source_name: LPCWSTR,","highlight_start":1,"highlight_end":34},{"text":"            arguments: *const LPCWSTR,","highlight_start":1,"highlight_end":39},{"text":"            arg_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            defines: *const DxcDefine,","highlight_start":1,"highlight_end":39},{"text":"            def_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            include_handler: *const IDxcIncludeHandler,","highlight_start":1,"highlight_end":56},{"text":"            result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn disassemble(","highlight_start":1,"highlight_end":24},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            disassembly: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:86:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCompiler: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCompiler,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCompilerVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":3893,"byte_end":4952,"line_start":86,"line_end":116,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCompiler: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":56},{"text":"        iid: IID_IDxcCompiler,","highlight_start":1,"highlight_end":31},{"text":"        vtable: IDxcCompilerVtbl,","highlight_start":1,"highlight_end":34},{"text":"        fn compile(","highlight_start":1,"highlight_end":20},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            source_name: LPCWSTR,","highlight_start":1,"highlight_end":34},{"text":"            entry_point: LPCWSTR,","highlight_start":1,"highlight_end":34},{"text":"            target_profile: LPCWSTR,","highlight_start":1,"highlight_end":37},{"text":"            arguments: *const LPCWSTR,","highlight_start":1,"highlight_end":39},{"text":"            arg_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            defines: *const DxcDefine,","highlight_start":1,"highlight_end":39},{"text":"            def_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            include_handler: *const IDxcIncludeHandler,","highlight_start":1,"highlight_end":56},{"text":"            result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn preprocess(","highlight_start":1,"highlight_end":23},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            source_name: LPCWSTR,","highlight_start":1,"highlight_end":34},{"text":"            arguments: *const LPCWSTR,","highlight_start":1,"highlight_end":39},{"text":"            arg_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            defines: *const DxcDefine,","highlight_start":1,"highlight_end":39},{"text":"            def_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            include_handler: *const IDxcIncludeHandler,","highlight_start":1,"highlight_end":56},{"text":"            result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn disassemble(","highlight_start":1,"highlight_end":24},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            disassembly: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:86:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCompiler: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCompiler,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCompilerVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":5064,"byte_end":5756,"line_start":119,"line_end":138,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCompiler2: IDxcCompiler, IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":71},{"text":"        iid: IID_IDxcCompiler2,","highlight_start":1,"highlight_end":32},{"text":"        vtable: IDxcCompiler2Vtbl,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn compile_with_debug(","highlight_start":1,"highlight_end":31},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            source_name: LPCWSTR,","highlight_start":1,"highlight_end":34},{"text":"            entry_point: LPCWSTR,","highlight_start":1,"highlight_end":34},{"text":"            target_profile: LPCWSTR,","highlight_start":1,"highlight_end":37},{"text":"            arguments: *const LPCWSTR,","highlight_start":1,"highlight_end":39},{"text":"            arg_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            defines: *const DxcDefine,","highlight_start":1,"highlight_end":39},{"text":"            def_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            include_handler: *const IDxcIncludeHandler,","highlight_start":1,"highlight_end":56},{"text":"            result: *mut *mut IDxcOperationResult,","highlight_start":1,"highlight_end":51},{"text":"            debug_blob_name: *mut LPWSTR,","highlight_start":1,"highlight_end":42},{"text":"            debug_blob: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:119:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCompiler2: IDxcCompiler, IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCompiler2,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCompiler2Vtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":5865,"byte_end":6387,"line_start":141,"line_end":157,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLinker: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcLinker,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcLinkerVtbl,","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn register_library(lib_name: LPCWSTR, lib: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn link(","highlight_start":1,"highlight_end":17},{"text":"            entry_name: LPCWSTR,","highlight_start":1,"highlight_end":33},{"text":"            target_profile: LPCWSTR,","highlight_start":1,"highlight_end":37},{"text":"            lib_names: *const LPCWSTR,","highlight_start":1,"highlight_end":39},{"text":"            lib_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            arguments: *const LPCWSTR,","highlight_start":1,"highlight_end":39},{"text":"            arg_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:141:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLinker: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLinker,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLinkerVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":5865,"byte_end":6387,"line_start":141,"line_end":157,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcLinker: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcLinker,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcLinkerVtbl,","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn register_library(lib_name: LPCWSTR, lib: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn link(","highlight_start":1,"highlight_end":17},{"text":"            entry_name: LPCWSTR,","highlight_start":1,"highlight_end":33},{"text":"            target_profile: LPCWSTR,","highlight_start":1,"highlight_end":37},{"text":"            lib_names: *const LPCWSTR,","highlight_start":1,"highlight_end":39},{"text":"            lib_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            arguments: *const LPCWSTR,","highlight_start":1,"highlight_end":39},{"text":"            arg_count: u32,","highlight_start":1,"highlight_end":28},{"text":"            result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:141:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcLinker: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcLinker,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcLinkerVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":6829,"byte_end":7093,"line_start":166,"line_end":173,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcValidator: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":57},{"text":"        iid: IID_IDxcValidator,","highlight_start":1,"highlight_end":32},{"text":"        vtable: IDxcValidatorVtbl,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn validate(shader: *const IDxcBlob, flags: u32, result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":108},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:166:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcValidator: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcValidator,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcValidatorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":7212,"byte_end":7661,"line_start":176,"line_end":186,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcContainerBuilder: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":64},{"text":"        iid: IID_IDxcContainerBuilder,","highlight_start":1,"highlight_end":39},{"text":"        vtable: IDxcContainerBuilderVtbl,","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn load(dxil_container_header: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn add_part(four_cc: u32, source: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn remove_part(four_cc: u32) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn seralize_container(result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:176:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcContainerBuilder: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcContainerBuilder,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcContainerBuilderVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":7212,"byte_end":7661,"line_start":176,"line_end":186,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcContainerBuilder: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":64},{"text":"        iid: IID_IDxcContainerBuilder,","highlight_start":1,"highlight_end":39},{"text":"        vtable: IDxcContainerBuilderVtbl,","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn load(dxil_container_header: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn add_part(four_cc: u32, source: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn remove_part(four_cc: u32) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn seralize_container(result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:176:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcContainerBuilder: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcContainerBuilder,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcContainerBuilderVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":7212,"byte_end":7661,"line_start":176,"line_end":186,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcContainerBuilder: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":64},{"text":"        iid: IID_IDxcContainerBuilder,","highlight_start":1,"highlight_end":39},{"text":"        vtable: IDxcContainerBuilderVtbl,","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn load(dxil_container_header: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn add_part(four_cc: u32, source: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn remove_part(four_cc: u32) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn seralize_container(result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:176:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcContainerBuilder: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcContainerBuilder,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcContainerBuilderVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":7212,"byte_end":7661,"line_start":176,"line_end":186,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcContainerBuilder: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":64},{"text":"        iid: IID_IDxcContainerBuilder,","highlight_start":1,"highlight_end":39},{"text":"        vtable: IDxcContainerBuilderVtbl,","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn load(dxil_container_header: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn add_part(four_cc: u32, source: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn remove_part(four_cc: u32) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn seralize_container(result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:176:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcContainerBuilder: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcContainerBuilder,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcContainerBuilderVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":7773,"byte_end":8038,"line_start":189,"line_end":196,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcAssembler: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":57},{"text":"        iid: IID_IDxcAssembler,","highlight_start":1,"highlight_end":32},{"text":"        vtable: IDxcAssemblerVtbl,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn assemble_to_container(shader: *const IDxcBlob, result: *mut *mut IDxcOperationResult) -> HRESULT;","highlight_start":1,"highlight_end":109},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:189:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcAssembler: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcAssembler,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcAssemblerVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":8160,"byte_end":8769,"line_start":199,"line_end":211,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":67},{"text":"        iid: IID_IDxcContainerReflection,","highlight_start":1,"highlight_end":42},{"text":"        vtable: IDxcContainerReflectionVtbl,","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn load(container: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_count(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_kind(idx: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_part_content(idx: u32, result: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn find_first_part_kind(kind: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"        fn get_part_reflection(idx: u32, iid: &IID, object: *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":90},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:199:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcContainerReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcContainerReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":8160,"byte_end":8769,"line_start":199,"line_end":211,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":67},{"text":"        iid: IID_IDxcContainerReflection,","highlight_start":1,"highlight_end":42},{"text":"        vtable: IDxcContainerReflectionVtbl,","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn load(container: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_count(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_kind(idx: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_part_content(idx: u32, result: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn find_first_part_kind(kind: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"        fn get_part_reflection(idx: u32, iid: &IID, object: *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":90},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:199:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcContainerReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcContainerReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":8160,"byte_end":8769,"line_start":199,"line_end":211,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":67},{"text":"        iid: IID_IDxcContainerReflection,","highlight_start":1,"highlight_end":42},{"text":"        vtable: IDxcContainerReflectionVtbl,","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn load(container: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_count(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_kind(idx: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_part_content(idx: u32, result: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn find_first_part_kind(kind: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"        fn get_part_reflection(idx: u32, iid: &IID, object: *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":90},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:199:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcContainerReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcContainerReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":8160,"byte_end":8769,"line_start":199,"line_end":211,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":67},{"text":"        iid: IID_IDxcContainerReflection,","highlight_start":1,"highlight_end":42},{"text":"        vtable: IDxcContainerReflectionVtbl,","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn load(container: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_count(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_kind(idx: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_part_content(idx: u32, result: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn find_first_part_kind(kind: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"        fn get_part_reflection(idx: u32, iid: &IID, object: *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":90},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:199:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcContainerReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcContainerReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":8160,"byte_end":8769,"line_start":199,"line_end":211,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":67},{"text":"        iid: IID_IDxcContainerReflection,","highlight_start":1,"highlight_end":42},{"text":"        vtable: IDxcContainerReflectionVtbl,","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn load(container: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_count(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_kind(idx: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_part_content(idx: u32, result: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn find_first_part_kind(kind: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"        fn get_part_reflection(idx: u32, iid: &IID, object: *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":90},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:199:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcContainerReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcContainerReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":8160,"byte_end":8769,"line_start":199,"line_end":211,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":67},{"text":"        iid: IID_IDxcContainerReflection,","highlight_start":1,"highlight_end":42},{"text":"        vtable: IDxcContainerReflectionVtbl,","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn load(container: *const IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_count(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_part_kind(idx: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_part_content(idx: u32, result: *mut *mut IDxcBlob) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn find_first_part_kind(kind: u32, result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"        fn get_part_reflection(idx: u32, iid: &IID, object: *mut *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":90},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:199:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcContainerReflection: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcContainerReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcContainerReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":8885,"byte_end":9401,"line_start":214,"line_end":225,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcOptimizerPass: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":61},{"text":"        iid: IID_IDxcOptimizerPass,","highlight_start":1,"highlight_end":36},{"text":"        vtable: IDxcOptimizerPassVtbl,","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_option_name(result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_description(result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_option_arg_count(count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_option_arg_name(arg_idx: u32, result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn get_option_arg_description(arg_idx: u32, result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":85},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:214:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcOptimizerPass: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcOptimizerPass,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcOptimizerPassVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":8885,"byte_end":9401,"line_start":214,"line_end":225,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcOptimizerPass: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":61},{"text":"        iid: IID_IDxcOptimizerPass,","highlight_start":1,"highlight_end":36},{"text":"        vtable: IDxcOptimizerPassVtbl,","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_option_name(result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_description(result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_option_arg_count(count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_option_arg_name(arg_idx: u32, result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn get_option_arg_description(arg_idx: u32, result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":85},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:214:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcOptimizerPass: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcOptimizerPass,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcOptimizerPassVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":8885,"byte_end":9401,"line_start":214,"line_end":225,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcOptimizerPass: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":61},{"text":"        iid: IID_IDxcOptimizerPass,","highlight_start":1,"highlight_end":36},{"text":"        vtable: IDxcOptimizerPassVtbl,","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_option_name(result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_description(result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_option_arg_count(count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_option_arg_name(arg_idx: u32, result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn get_option_arg_description(arg_idx: u32, result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":85},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:214:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcOptimizerPass: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcOptimizerPass,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcOptimizerPassVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":8885,"byte_end":9401,"line_start":214,"line_end":225,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcOptimizerPass: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":61},{"text":"        iid: IID_IDxcOptimizerPass,","highlight_start":1,"highlight_end":36},{"text":"        vtable: IDxcOptimizerPassVtbl,","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_option_name(result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_description(result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_option_arg_count(count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_option_arg_name(arg_idx: u32, result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn get_option_arg_description(arg_idx: u32, result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":85},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:214:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcOptimizerPass: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcOptimizerPass,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcOptimizerPassVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":8885,"byte_end":9401,"line_start":214,"line_end":225,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcOptimizerPass: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":61},{"text":"        iid: IID_IDxcOptimizerPass,","highlight_start":1,"highlight_end":36},{"text":"        vtable: IDxcOptimizerPassVtbl,","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_option_name(result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_description(result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_option_arg_count(count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_option_arg_name(arg_idx: u32, result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn get_option_arg_description(arg_idx: u32, result: *mut LPWSTR) -> HRESULT;","highlight_start":1,"highlight_end":85},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:214:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcOptimizerPass: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcOptimizerPass,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcOptimizerPassVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":9513,"byte_end":10073,"line_start":228,"line_end":242,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcOptimizer: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":57},{"text":"        iid: IID_IDxcOptimizer,","highlight_start":1,"highlight_end":32},{"text":"        vtable: IDxcOptimizerVtbl,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_available_pass_count(count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_available_pass(index: u32, result: *mut *mut IDxcOptimizerPass) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn run_optimizer(","highlight_start":1,"highlight_end":26},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            options: *const LPCWSTR,","highlight_start":1,"highlight_end":37},{"text":"            option_count: u32,","highlight_start":1,"highlight_end":31},{"text":"            output_module: *mut *mut IDxcBlob,","highlight_start":1,"highlight_end":47},{"text":"            output_text: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:228:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcOptimizer: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcOptimizer,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcOptimizerVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":9513,"byte_end":10073,"line_start":228,"line_end":242,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcOptimizer: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":57},{"text":"        iid: IID_IDxcOptimizer,","highlight_start":1,"highlight_end":32},{"text":"        vtable: IDxcOptimizerVtbl,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_available_pass_count(count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_available_pass(index: u32, result: *mut *mut IDxcOptimizerPass) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn run_optimizer(","highlight_start":1,"highlight_end":26},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            options: *const LPCWSTR,","highlight_start":1,"highlight_end":37},{"text":"            option_count: u32,","highlight_start":1,"highlight_end":31},{"text":"            output_module: *mut *mut IDxcBlob,","highlight_start":1,"highlight_end":47},{"text":"            output_text: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:228:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcOptimizer: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcOptimizer,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcOptimizerVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":9513,"byte_end":10073,"line_start":228,"line_end":242,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcOptimizer: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":57},{"text":"        iid: IID_IDxcOptimizer,","highlight_start":1,"highlight_end":32},{"text":"        vtable: IDxcOptimizerVtbl,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_available_pass_count(count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_available_pass(index: u32, result: *mut *mut IDxcOptimizerPass) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn run_optimizer(","highlight_start":1,"highlight_end":26},{"text":"            blob: *const IDxcBlob,","highlight_start":1,"highlight_end":35},{"text":"            options: *const LPCWSTR,","highlight_start":1,"highlight_end":37},{"text":"            option_count: u32,","highlight_start":1,"highlight_end":31},{"text":"            output_module: *mut *mut IDxcBlob,","highlight_start":1,"highlight_end":47},{"text":"            output_text: *mut *mut IDxcBlobEncoding) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:228:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcOptimizer: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcOptimizer,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcOptimizerVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":10400,"byte_end":10682,"line_start":249,"line_end":257,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcVersionInfo: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":59},{"text":"        iid: IID_IDxcVersionInfo,","highlight_start":1,"highlight_end":34},{"text":"        vtable: IDxcVersionInfoVtbl,","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_version(major: *mut u32, minor: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":69},{"text":"        fn get_flags(flags: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:249:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcVersionInfo: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m251\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcVersionInfo,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcVersionInfoVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":10400,"byte_end":10682,"line_start":249,"line_end":257,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcVersionInfo: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":59},{"text":"        iid: IID_IDxcVersionInfo,","highlight_start":1,"highlight_end":34},{"text":"        vtable: IDxcVersionInfoVtbl,","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_version(major: *mut u32, minor: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":69},{"text":"        fn get_flags(flags: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:249:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcVersionInfo: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m251\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcVersionInfo,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcVersionInfoVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":10797,"byte_end":11052,"line_start":260,"line_end":267,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcVersionInfo2: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":60},{"text":"        iid: IID_IDxcVersionInfo2,","highlight_start":1,"highlight_end":35},{"text":"        vtable: IDxcVersionInfo2Vtbl,","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_commit_info(commit_count: *mut u32, commit_hash: *mut *mut u8) -> HRESULT;","highlight_start":1,"highlight_end":90},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:260:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcVersionInfo2: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcVersionInfo2,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcVersionInfo2Vtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs","byte_start":11173,"byte_end":12634,"line_start":270,"line_end":294,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface ID3D12ShaderReflection: IUnknown {","highlight_start":1,"highlight_end":49},{"text":"        iid: IID_ID3D12ShaderReflection,","highlight_start":1,"highlight_end":41},{"text":"        vtable: ID3D12ShaderReflectionVtbl,","highlight_start":1,"highlight_end":44},{"text":"        fn get_desc(p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":53},{"text":"        fn get_constant_buffer_by_index(index: u32) -> *mut c_void;","highlight_start":1,"highlight_end":68},{"text":"        fn get_constant_buffer_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":76},{"text":"        fn get_resource_binding_desc(resource_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_input_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":91},{"text":"        fn get_output_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn get_patch_constant_parameter_desc(parameter_index: u32, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":100},{"text":"        fn get_variable_by_name(name: *const c_void) -> *mut c_void;","highlight_start":1,"highlight_end":69},{"text":"        fn get_resource_binding_desc_by_name(name: *const c_void, p_desc: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_mov_instruction_count() -> u32;","highlight_start":1,"highlight_end":47},{"text":"        fn get_movc_instruction_count() -> u32;","highlight_start":1,"highlight_end":48},{"text":"        fn get_conversion_instruction_count() -> u32;","highlight_start":1,"highlight_end":54},{"text":"        fn get_bitwise_instruction_count() -> u32;","highlight_start":1,"highlight_end":51},{"text":"        fn get_gs_input_primitive() -> u32;","highlight_start":1,"highlight_end":44},{"text":"        fn is_sample_frequency_shader() -> bool;","highlight_start":1,"highlight_end":49},{"text":"        fn get_num_interface_slots() -> u32;","highlight_start":1,"highlight_end":45},{"text":"        fn get_min_feature_level(p_level: *mut c_void) -> HRESULT;","highlight_start":1,"highlight_end":67},{"text":"        fn get_thread_group_size(size_x: *mut u32, size_y: *mut u32, size_z: *mut u32) -> u32;","highlight_start":1,"highlight_end":95},{"text":"        fn get_requires_flags() -> u64;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/ffi.rs:270:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface ID3D12ShaderReflection: IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_ID3D12ShaderReflection,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: ID3D12ShaderReflectionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":12744,"byte_end":13580,"line_start":361,"line_end":375,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":58},{"text":"        iid: IID_IDxcDiagnostic,","highlight_start":1,"highlight_end":33},{"text":"        vtable: IDxcDiagnosticVtbl,","highlight_start":1,"highlight_end":36},{"text":"        fn format_diagnostic(options: DxcDiagnosticDisplayOptions, result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_severity(result: *mut DxcDiagnosticSeverity) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_category_text(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_num_ranges(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_range_at(index: u32, result: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_num_fix_its(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn get_fix_it_at(index: u32, replacement_range: *mut *mut IDxcSourceRange, text: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:361:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcDiagnostic,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcDiagnosticVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":12744,"byte_end":13580,"line_start":361,"line_end":375,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":58},{"text":"        iid: IID_IDxcDiagnostic,","highlight_start":1,"highlight_end":33},{"text":"        vtable: IDxcDiagnosticVtbl,","highlight_start":1,"highlight_end":36},{"text":"        fn format_diagnostic(options: DxcDiagnosticDisplayOptions, result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_severity(result: *mut DxcDiagnosticSeverity) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_category_text(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_num_ranges(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_range_at(index: u32, result: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_num_fix_its(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn get_fix_it_at(index: u32, replacement_range: *mut *mut IDxcSourceRange, text: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:361:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcDiagnostic,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcDiagnosticVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":12744,"byte_end":13580,"line_start":361,"line_end":375,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":58},{"text":"        iid: IID_IDxcDiagnostic,","highlight_start":1,"highlight_end":33},{"text":"        vtable: IDxcDiagnosticVtbl,","highlight_start":1,"highlight_end":36},{"text":"        fn format_diagnostic(options: DxcDiagnosticDisplayOptions, result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_severity(result: *mut DxcDiagnosticSeverity) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_category_text(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_num_ranges(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_range_at(index: u32, result: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_num_fix_its(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn get_fix_it_at(index: u32, replacement_range: *mut *mut IDxcSourceRange, text: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:361:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcDiagnostic,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcDiagnosticVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":12744,"byte_end":13580,"line_start":361,"line_end":375,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":58},{"text":"        iid: IID_IDxcDiagnostic,","highlight_start":1,"highlight_end":33},{"text":"        vtable: IDxcDiagnosticVtbl,","highlight_start":1,"highlight_end":36},{"text":"        fn format_diagnostic(options: DxcDiagnosticDisplayOptions, result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_severity(result: *mut DxcDiagnosticSeverity) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_category_text(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_num_ranges(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_range_at(index: u32, result: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_num_fix_its(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn get_fix_it_at(index: u32, replacement_range: *mut *mut IDxcSourceRange, text: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:361:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcDiagnostic,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcDiagnosticVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":12744,"byte_end":13580,"line_start":361,"line_end":375,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":58},{"text":"        iid: IID_IDxcDiagnostic,","highlight_start":1,"highlight_end":33},{"text":"        vtable: IDxcDiagnosticVtbl,","highlight_start":1,"highlight_end":36},{"text":"        fn format_diagnostic(options: DxcDiagnosticDisplayOptions, result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_severity(result: *mut DxcDiagnosticSeverity) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_category_text(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_num_ranges(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_range_at(index: u32, result: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_num_fix_its(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn get_fix_it_at(index: u32, replacement_range: *mut *mut IDxcSourceRange, text: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:361:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcDiagnostic,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcDiagnosticVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":12744,"byte_end":13580,"line_start":361,"line_end":375,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":58},{"text":"        iid: IID_IDxcDiagnostic,","highlight_start":1,"highlight_end":33},{"text":"        vtable: IDxcDiagnosticVtbl,","highlight_start":1,"highlight_end":36},{"text":"        fn format_diagnostic(options: DxcDiagnosticDisplayOptions, result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_severity(result: *mut DxcDiagnosticSeverity) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_category_text(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_num_ranges(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_range_at(index: u32, result: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_num_fix_its(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn get_fix_it_at(index: u32, replacement_range: *mut *mut IDxcSourceRange, text: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:361:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcDiagnostic,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcDiagnosticVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":12744,"byte_end":13580,"line_start":361,"line_end":375,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":58},{"text":"        iid: IID_IDxcDiagnostic,","highlight_start":1,"highlight_end":33},{"text":"        vtable: IDxcDiagnosticVtbl,","highlight_start":1,"highlight_end":36},{"text":"        fn format_diagnostic(options: DxcDiagnosticDisplayOptions, result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_severity(result: *mut DxcDiagnosticSeverity) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_category_text(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_num_ranges(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_range_at(index: u32, result: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_num_fix_its(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn get_fix_it_at(index: u32, replacement_range: *mut *mut IDxcSourceRange, text: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:361:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcDiagnostic,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcDiagnosticVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":12744,"byte_end":13580,"line_start":361,"line_end":375,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":58},{"text":"        iid: IID_IDxcDiagnostic,","highlight_start":1,"highlight_end":33},{"text":"        vtable: IDxcDiagnosticVtbl,","highlight_start":1,"highlight_end":36},{"text":"        fn format_diagnostic(options: DxcDiagnosticDisplayOptions, result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_severity(result: *mut DxcDiagnosticSeverity) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_category_text(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_num_ranges(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_range_at(index: u32, result: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_num_fix_its(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn get_fix_it_at(index: u32, replacement_range: *mut *mut IDxcSourceRange, text: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:361:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcDiagnostic,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcDiagnosticVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":12744,"byte_end":13580,"line_start":361,"line_end":375,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":58},{"text":"        iid: IID_IDxcDiagnostic,","highlight_start":1,"highlight_end":33},{"text":"        vtable: IDxcDiagnosticVtbl,","highlight_start":1,"highlight_end":36},{"text":"        fn format_diagnostic(options: DxcDiagnosticDisplayOptions, result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":99},{"text":"        fn get_severity(result: *mut DxcDiagnosticSeverity) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_category_text(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_num_ranges(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn get_range_at(index: u32, result: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_num_fix_its(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":57},{"text":"        fn get_fix_it_at(index: u32, replacement_range: *mut *mut IDxcSourceRange, text: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:361:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcDiagnostic: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcDiagnostic,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcDiagnosticVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":13691,"byte_end":14062,"line_start":378,"line_end":386,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcInclusion: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":57},{"text":"        iid: IID_IDxcInclusion,","highlight_start":1,"highlight_end":32},{"text":"        vtable: IDxcInclusionVtbl,","highlight_start":1,"highlight_end":35},{"text":"        fn get_included_file(result: *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":69},{"text":"        fn get_stack_length(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_stack_item(index: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:378:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m378\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcInclusion: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m380\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcInclusion,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcInclusionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m386\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":13691,"byte_end":14062,"line_start":378,"line_end":386,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcInclusion: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":57},{"text":"        iid: IID_IDxcInclusion,","highlight_start":1,"highlight_end":32},{"text":"        vtable: IDxcInclusionVtbl,","highlight_start":1,"highlight_end":35},{"text":"        fn get_included_file(result: *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":69},{"text":"        fn get_stack_length(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_stack_item(index: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:378:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m378\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcInclusion: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m380\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcInclusion,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcInclusionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m386\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":13691,"byte_end":14062,"line_start":378,"line_end":386,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcInclusion: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":57},{"text":"        iid: IID_IDxcInclusion,","highlight_start":1,"highlight_end":32},{"text":"        vtable: IDxcInclusionVtbl,","highlight_start":1,"highlight_end":35},{"text":"        fn get_included_file(result: *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":69},{"text":"        fn get_stack_length(result: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_stack_item(index: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:378:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m378\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcInclusion: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m380\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcInclusion,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcInclusionVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m386\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":14169,"byte_end":14568,"line_start":389,"line_end":398,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcToken: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":53},{"text":"        iid: IID_IDxcToken,","highlight_start":1,"highlight_end":28},{"text":"        vtable: IDxcTokenVtbl,","highlight_start":1,"highlight_end":31},{"text":"        fn get_kind(value: *mut DxcTokenKind) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_location(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"        fn get_extent(value: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_spelling(value: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:389:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m390\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcToken: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m391\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcToken,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m392\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTokenVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m398\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":14169,"byte_end":14568,"line_start":389,"line_end":398,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcToken: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":53},{"text":"        iid: IID_IDxcToken,","highlight_start":1,"highlight_end":28},{"text":"        vtable: IDxcTokenVtbl,","highlight_start":1,"highlight_end":31},{"text":"        fn get_kind(value: *mut DxcTokenKind) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_location(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"        fn get_extent(value: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_spelling(value: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:389:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m390\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcToken: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m391\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcToken,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m392\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTokenVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m398\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":14169,"byte_end":14568,"line_start":389,"line_end":398,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcToken: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":53},{"text":"        iid: IID_IDxcToken,","highlight_start":1,"highlight_end":28},{"text":"        vtable: IDxcTokenVtbl,","highlight_start":1,"highlight_end":31},{"text":"        fn get_kind(value: *mut DxcTokenKind) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_location(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"        fn get_extent(value: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_spelling(value: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:389:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m390\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcToken: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m391\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcToken,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m392\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTokenVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m398\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":14169,"byte_end":14568,"line_start":389,"line_end":398,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcToken: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":53},{"text":"        iid: IID_IDxcToken,","highlight_start":1,"highlight_end":28},{"text":"        vtable: IDxcTokenVtbl,","highlight_start":1,"highlight_end":31},{"text":"        fn get_kind(value: *mut DxcTokenKind) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_location(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"        fn get_extent(value: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_spelling(value: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:389:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m390\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcToken: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m391\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcToken,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m392\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTokenVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m398\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":14674,"byte_end":15007,"line_start":401,"line_end":409,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcType: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":52},{"text":"        iid: IID_IDxcType,","highlight_start":1,"highlight_end":27},{"text":"        vtable: IDxcTypeVtbl,","highlight_start":1,"highlight_end":30},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcType, result: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn get_kind(result: *mut DxcTypeKind) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:401:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m401\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m402\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcType: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m403\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcType,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTypeVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":14674,"byte_end":15007,"line_start":401,"line_end":409,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcType: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":52},{"text":"        iid: IID_IDxcType,","highlight_start":1,"highlight_end":27},{"text":"        vtable: IDxcTypeVtbl,","highlight_start":1,"highlight_end":30},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcType, result: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn get_kind(result: *mut DxcTypeKind) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:401:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m401\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m402\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcType: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m403\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcType,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTypeVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":14674,"byte_end":15007,"line_start":401,"line_end":409,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcType: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":52},{"text":"        iid: IID_IDxcType,","highlight_start":1,"highlight_end":27},{"text":"        vtable: IDxcTypeVtbl,","highlight_start":1,"highlight_end":30},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcType, result: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":78},{"text":"        fn get_kind(result: *mut DxcTypeKind) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:401:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m401\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m402\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcType: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m403\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcType,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTypeVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":15123,"byte_end":15552,"line_start":412,"line_end":420,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcSourceLocation: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":62},{"text":"        iid: IID_IDxcSourceLocation,","highlight_start":1,"highlight_end":37},{"text":"        vtable: IDxcSourceLocationVtbl,","highlight_start":1,"highlight_end":40},{"text":"        fn is_equal_to(other: *const IDxcSourceLocation, result: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_spelling_location(file: *mut *mut IDxcFile, line: *mut u32, col: *mut u32, offset: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn is_null(result: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:412:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m412\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m413\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcSourceLocation: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcSourceLocation,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m415\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcSourceLocationVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m420\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":15123,"byte_end":15552,"line_start":412,"line_end":420,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcSourceLocation: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":62},{"text":"        iid: IID_IDxcSourceLocation,","highlight_start":1,"highlight_end":37},{"text":"        vtable: IDxcSourceLocationVtbl,","highlight_start":1,"highlight_end":40},{"text":"        fn is_equal_to(other: *const IDxcSourceLocation, result: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_spelling_location(file: *mut *mut IDxcFile, line: *mut u32, col: *mut u32, offset: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn is_null(result: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:412:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m412\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m413\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcSourceLocation: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcSourceLocation,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m415\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcSourceLocationVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m420\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":15123,"byte_end":15552,"line_start":412,"line_end":420,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcSourceLocation: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":62},{"text":"        iid: IID_IDxcSourceLocation,","highlight_start":1,"highlight_end":37},{"text":"        vtable: IDxcSourceLocationVtbl,","highlight_start":1,"highlight_end":40},{"text":"        fn is_equal_to(other: *const IDxcSourceLocation, result: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_spelling_location(file: *mut *mut IDxcFile, line: *mut u32, col: *mut u32, offset: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn is_null(result: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:412:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m412\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m413\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcSourceLocation: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcSourceLocation,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m415\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcSourceLocationVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m420\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":15665,"byte_end":16096,"line_start":423,"line_end":432,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcSourceRange: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":59},{"text":"        iid: IID_IDxcSourceRange,","highlight_start":1,"highlight_end":34},{"text":"        vtable: IDxcSourceRangeVtbl,","highlight_start":1,"highlight_end":37},{"text":"        fn is_null(value: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn get_start(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_end(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_offsets(start_offset: *mut u32, end_offset: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:423:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m424\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcSourceRange: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m425\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcSourceRange,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m426\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcSourceRangeVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":15665,"byte_end":16096,"line_start":423,"line_end":432,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcSourceRange: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":59},{"text":"        iid: IID_IDxcSourceRange,","highlight_start":1,"highlight_end":34},{"text":"        vtable: IDxcSourceRangeVtbl,","highlight_start":1,"highlight_end":37},{"text":"        fn is_null(value: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn get_start(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_end(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_offsets(start_offset: *mut u32, end_offset: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:423:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m424\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcSourceRange: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m425\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcSourceRange,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m426\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcSourceRangeVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":15665,"byte_end":16096,"line_start":423,"line_end":432,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcSourceRange: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":59},{"text":"        iid: IID_IDxcSourceRange,","highlight_start":1,"highlight_end":34},{"text":"        vtable: IDxcSourceRangeVtbl,","highlight_start":1,"highlight_end":37},{"text":"        fn is_null(value: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn get_start(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_end(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_offsets(start_offset: *mut u32, end_offset: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:423:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m424\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcSourceRange: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m425\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcSourceRange,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m426\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcSourceRangeVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":15665,"byte_end":16096,"line_start":423,"line_end":432,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcSourceRange: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":59},{"text":"        iid: IID_IDxcSourceRange,","highlight_start":1,"highlight_end":34},{"text":"        vtable: IDxcSourceRangeVtbl,","highlight_start":1,"highlight_end":37},{"text":"        fn is_null(value: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn get_start(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_end(value: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_offsets(start_offset: *mut u32, end_offset: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:423:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m424\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcSourceRange: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m425\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcSourceRange,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m426\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcSourceRangeVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":16204,"byte_end":17984,"line_start":435,"line_end":461,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcCursor: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":54},{"text":"        iid: IID_IDxcCursor,","highlight_start":1,"highlight_end":29},{"text":"        vtable: IDxcCursorVtbl,","highlight_start":1,"highlight_end":32},{"text":"        fn get_extent(range: *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":68},{"text":"        fn get_location(result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_kind(result: *mut DxcCursorKind) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_kind_flags(result: *mut DxcCursorKindFlags) -> HRESULT;","highlight_start":1,"highlight_end":71},{"text":"        fn get_semantic_parent(result: *mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":72},{"text":"        fn get_lexical_parent(result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":70},{"text":"        fn get_cursor_type(result:*mut*mut IDxcType) -> HRESULT;","highlight_start":1,"highlight_end":65},{"text":"        fn get_num_arguments(result:*mut i32) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_argument_at(index: i32, result: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":81},{"text":"        fn get_referenced_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn get_definition_cursor(result:*mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn find_references_in_file(file: *const IDxcFile, skip: u32, top:u32, result_length: *mut u32, result: *mut *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":150},{"text":"        fn get_spelling(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":56},{"text":"        fn is_equal_to(other: *const IDxcCursor, result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn is_null(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":49},{"text":"        fn is_definition(result:*mut bool) -> HRESULT;","highlight_start":1,"highlight_end":55},{"text":"        fn get_display_name(result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_qualified_name(include_template_args:bool, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":88},{"text":"        fn get_formatted_name(formatting: DxcCursorFormatting, result:*mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":93},{"text":"        fn get_children(skip: u32, top: u32, result_length:*mut u32, result:*mut*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":113},{"text":"        fn get_snapped_child(location:  *const IDxcSourceLocation, result:*mut*mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:435:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcCursor: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcCursor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcCursorVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18097,"byte_end":18429,"line_start":464,"line_end":472,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcUnsavedFile: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":59},{"text":"        iid: IID_IDxcUnsavedFile,","highlight_start":1,"highlight_end":34},{"text":"        vtable: IDxcUnsavedFileVtbl,","highlight_start":1,"highlight_end":37},{"text":"        fn get_file_name(file_name: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_contents(contents: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_length(lenth : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:464:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m465\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcUnsavedFile: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcUnsavedFile,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m467\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcUnsavedFileVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m472\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18097,"byte_end":18429,"line_start":464,"line_end":472,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcUnsavedFile: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":59},{"text":"        iid: IID_IDxcUnsavedFile,","highlight_start":1,"highlight_end":34},{"text":"        vtable: IDxcUnsavedFileVtbl,","highlight_start":1,"highlight_end":37},{"text":"        fn get_file_name(file_name: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_contents(contents: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_length(lenth : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:464:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m465\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcUnsavedFile: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcUnsavedFile,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m467\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcUnsavedFileVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m472\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18097,"byte_end":18429,"line_start":464,"line_end":472,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcUnsavedFile: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":59},{"text":"        iid: IID_IDxcUnsavedFile,","highlight_start":1,"highlight_end":34},{"text":"        vtable: IDxcUnsavedFileVtbl,","highlight_start":1,"highlight_end":37},{"text":"        fn get_file_name(file_name: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":60},{"text":"        fn get_contents(contents: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn get_length(lenth : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:464:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m465\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcUnsavedFile: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcUnsavedFile,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m467\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcUnsavedFileVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m472\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18535,"byte_end":18806,"line_start":475,"line_end":482,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcFile: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":52},{"text":"        iid: IID_IDxcFile,","highlight_start":1,"highlight_end":27},{"text":"        vtable: IDxcFileVtbl,","highlight_start":1,"highlight_end":30},{"text":"        fn get_name(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":52},{"text":"        fn is_equal_to(other : *const IDxcFile, result: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:475:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m475\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcFile: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m477\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcFile,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m478\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcFileVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m482\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18535,"byte_end":18806,"line_start":475,"line_end":482,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcFile: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":52},{"text":"        iid: IID_IDxcFile,","highlight_start":1,"highlight_end":27},{"text":"        vtable: IDxcFileVtbl,","highlight_start":1,"highlight_end":30},{"text":"        fn get_name(result: *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":52},{"text":"        fn is_equal_to(other : *const IDxcFile, result: *mut bool) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:475:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m475\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcFile: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m477\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcFile,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m478\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcFileVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m482\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":18923,"byte_end":20549,"line_start":485,"line_end":505,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":63},{"text":"        iid: IID_IDxcTranslationUnit,","highlight_start":1,"highlight_end":38},{"text":"        vtable: IDxcTranslationUnitVtbl,","highlight_start":1,"highlight_end":41},{"text":"        fn get_cursor(cursor: *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn tokenize(range: *const IDxcSourceRange, tokens: *mut *mut *mut IDxcToken, token_count: *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_location( file: *mut IDxcFile, line: u32, column: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":120},{"text":"        fn get_num_diagnostics(value : *mut u32) -> HRESULT;","highlight_start":1,"highlight_end":61},{"text":"        fn get_diagnostic(index: u32, value: *mut *mut IDxcDiagnostic) -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_file(name : *const u8, result : *mut *mut IDxcFile) -> HRESULT;","highlight_start":1,"highlight_end":79},{"text":"        fn get_file_name(result : *mut LPSTR) -> HRESULT;","highlight_start":1,"highlight_end":58},{"text":"        fn reparse(unsaved_files : *mut *mut IDxcUnsavedFile, num_unsaved_files: u32) -> HRESULT;","highlight_start":1,"highlight_end":98},{"text":"        fn get_cursor_for_location(location: *const IDxcSourceLocation, result : *mut *mut IDxcCursor) -> HRESULT;","highlight_start":1,"highlight_end":115},{"text":"        fn get_location_for_offset(file : *const IDxcFile, offset: u32, result: *mut *mut IDxcSourceLocation) -> HRESULT;","highlight_start":1,"highlight_end":122},{"text":"        fn get_skipped_ranges(file: *const IDxcFile, result_count: *mut u32, result: *mut *mut *mut IDxcSourceRange) -> HRESULT;","highlight_start":1,"highlight_end":129},{"text":"        fn get_diagnostic_details(","highlight_start":1,"highlight_end":35},{"text":"            index: u32,  options: DxcDiagnosticDisplayOptions, error_code: *mut u32, error_line: *mut u32, error_column: *mut u32,","highlight_start":1,"highlight_end":131},{"text":"            error_file: *mut BSTR, error_offset: *mut u32, error_length: *mut u32, error_message: *mut BSTR) -> HRESULT;","highlight_start":1,"highlight_end":121},{"text":"        fn get_inclusion_list(result_count: *mut u32, result: *mut *mut *mut IDxcInclusion) -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:485:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcTranslationUnit: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcTranslationUnit,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcTranslationUnitVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":20655,"byte_end":21326,"line_start":508,"line_end":523,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcIndex: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":53},{"text":"        iid: IID_IDxcIndex,","highlight_start":1,"highlight_end":28},{"text":"        vtable: IDxcIndexVtbl,","highlight_start":1,"highlight_end":31},{"text":"        fn set_global_options(options: DxcGlobalOptions) -> HRESULT;","highlight_start":1,"highlight_end":69},{"text":"        fn get_global_options(options: *mut DxcGlobalOptions) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn parse_translation_unit(","highlight_start":1,"highlight_end":35},{"text":"            source_filename: *const u8,","highlight_start":1,"highlight_end":40},{"text":"            command_line_args: *const *const u8,","highlight_start":1,"highlight_end":49},{"text":"            num_command_line_args: i32,","highlight_start":1,"highlight_end":40},{"text":"            unsaved_files: *const *const IDxcUnsavedFile,","highlight_start":1,"highlight_end":58},{"text":"            num_unsaved_files: u32,","highlight_start":1,"highlight_end":36},{"text":"            options: DxcTranslationUnitFlags,","highlight_start":1,"highlight_end":46},{"text":"            translation_unit: *mut *mut IDxcTranslationUnit) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:508:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcIndex: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcIndex,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcIndexVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":20655,"byte_end":21326,"line_start":508,"line_end":523,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcIndex: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":53},{"text":"        iid: IID_IDxcIndex,","highlight_start":1,"highlight_end":28},{"text":"        vtable: IDxcIndexVtbl,","highlight_start":1,"highlight_end":31},{"text":"        fn set_global_options(options: DxcGlobalOptions) -> HRESULT;","highlight_start":1,"highlight_end":69},{"text":"        fn get_global_options(options: *mut DxcGlobalOptions) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn parse_translation_unit(","highlight_start":1,"highlight_end":35},{"text":"            source_filename: *const u8,","highlight_start":1,"highlight_end":40},{"text":"            command_line_args: *const *const u8,","highlight_start":1,"highlight_end":49},{"text":"            num_command_line_args: i32,","highlight_start":1,"highlight_end":40},{"text":"            unsaved_files: *const *const IDxcUnsavedFile,","highlight_start":1,"highlight_end":58},{"text":"            num_unsaved_files: u32,","highlight_start":1,"highlight_end":36},{"text":"            options: DxcTranslationUnitFlags,","highlight_start":1,"highlight_end":46},{"text":"            translation_unit: *mut *mut IDxcTranslationUnit) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:508:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcIndex: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcIndex,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcIndexVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":20655,"byte_end":21326,"line_start":508,"line_end":523,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcIndex: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":53},{"text":"        iid: IID_IDxcIndex,","highlight_start":1,"highlight_end":28},{"text":"        vtable: IDxcIndexVtbl,","highlight_start":1,"highlight_end":31},{"text":"        fn set_global_options(options: DxcGlobalOptions) -> HRESULT;","highlight_start":1,"highlight_end":69},{"text":"        fn get_global_options(options: *mut DxcGlobalOptions) -> HRESULT;","highlight_start":1,"highlight_end":74},{"text":"        fn parse_translation_unit(","highlight_start":1,"highlight_end":35},{"text":"            source_filename: *const u8,","highlight_start":1,"highlight_end":40},{"text":"            command_line_args: *const *const u8,","highlight_start":1,"highlight_end":49},{"text":"            num_command_line_args: i32,","highlight_start":1,"highlight_end":40},{"text":"            unsaved_files: *const *const IDxcUnsavedFile,","highlight_start":1,"highlight_end":58},{"text":"            num_unsaved_files: u32,","highlight_start":1,"highlight_end":36},{"text":"            options: DxcTranslationUnitFlags,","highlight_start":1,"highlight_end":46},{"text":"            translation_unit: *mut *mut IDxcTranslationUnit) -> HRESULT;","highlight_start":1,"highlight_end":73},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:508:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcIndex: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcIndex,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcIndexVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":21440,"byte_end":22305,"line_start":526,"line_end":538,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":60},{"text":"        iid: IID_IDxcIntelliSense,","highlight_start":1,"highlight_end":35},{"text":"        vtable: IDxcIntelliSenseVtbl,","highlight_start":1,"highlight_end":38},{"text":"        fn create_index(index: *mut *mut IDxcIndex) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn get_null_location(location: *mut *mut  IDxcSourceLocation)  -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_null_range(location: *mut *mut  IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":77},{"text":"        fn get_range( start: *const IDxcSourceLocation, end: *const IDxcSourceLocation, location: *mut *mut IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"        fn get_default_diagnostic_display_options(value: *mut DxcDiagnosticDisplayOptions)  -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"        fn get_default_editing_tu_options(value: *mut DxcTranslationUnitFlags)  -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn create_unsaved_file(file_name: LPCSTR, contents: LPCSTR, content_length: u32 , result: *mut *mut IDxcUnsavedFile)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:526:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcIntelliSense,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcIntelliSenseVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":21440,"byte_end":22305,"line_start":526,"line_end":538,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":60},{"text":"        iid: IID_IDxcIntelliSense,","highlight_start":1,"highlight_end":35},{"text":"        vtable: IDxcIntelliSenseVtbl,","highlight_start":1,"highlight_end":38},{"text":"        fn create_index(index: *mut *mut IDxcIndex) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn get_null_location(location: *mut *mut  IDxcSourceLocation)  -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_null_range(location: *mut *mut  IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":77},{"text":"        fn get_range( start: *const IDxcSourceLocation, end: *const IDxcSourceLocation, location: *mut *mut IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"        fn get_default_diagnostic_display_options(value: *mut DxcDiagnosticDisplayOptions)  -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"        fn get_default_editing_tu_options(value: *mut DxcTranslationUnitFlags)  -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn create_unsaved_file(file_name: LPCSTR, contents: LPCSTR, content_length: u32 , result: *mut *mut IDxcUnsavedFile)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:526:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcIntelliSense,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcIntelliSenseVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":21440,"byte_end":22305,"line_start":526,"line_end":538,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":60},{"text":"        iid: IID_IDxcIntelliSense,","highlight_start":1,"highlight_end":35},{"text":"        vtable: IDxcIntelliSenseVtbl,","highlight_start":1,"highlight_end":38},{"text":"        fn create_index(index: *mut *mut IDxcIndex) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn get_null_location(location: *mut *mut  IDxcSourceLocation)  -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_null_range(location: *mut *mut  IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":77},{"text":"        fn get_range( start: *const IDxcSourceLocation, end: *const IDxcSourceLocation, location: *mut *mut IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"        fn get_default_diagnostic_display_options(value: *mut DxcDiagnosticDisplayOptions)  -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"        fn get_default_editing_tu_options(value: *mut DxcTranslationUnitFlags)  -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn create_unsaved_file(file_name: LPCSTR, contents: LPCSTR, content_length: u32 , result: *mut *mut IDxcUnsavedFile)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:526:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcIntelliSense,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcIntelliSenseVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":21440,"byte_end":22305,"line_start":526,"line_end":538,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":60},{"text":"        iid: IID_IDxcIntelliSense,","highlight_start":1,"highlight_end":35},{"text":"        vtable: IDxcIntelliSenseVtbl,","highlight_start":1,"highlight_end":38},{"text":"        fn create_index(index: *mut *mut IDxcIndex) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn get_null_location(location: *mut *mut  IDxcSourceLocation)  -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_null_range(location: *mut *mut  IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":77},{"text":"        fn get_range( start: *const IDxcSourceLocation, end: *const IDxcSourceLocation, location: *mut *mut IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"        fn get_default_diagnostic_display_options(value: *mut DxcDiagnosticDisplayOptions)  -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"        fn get_default_editing_tu_options(value: *mut DxcTranslationUnitFlags)  -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn create_unsaved_file(file_name: LPCSTR, contents: LPCSTR, content_length: u32 , result: *mut *mut IDxcUnsavedFile)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:526:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcIntelliSense,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcIntelliSenseVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":21440,"byte_end":22305,"line_start":526,"line_end":538,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":60},{"text":"        iid: IID_IDxcIntelliSense,","highlight_start":1,"highlight_end":35},{"text":"        vtable: IDxcIntelliSenseVtbl,","highlight_start":1,"highlight_end":38},{"text":"        fn create_index(index: *mut *mut IDxcIndex) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn get_null_location(location: *mut *mut  IDxcSourceLocation)  -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_null_range(location: *mut *mut  IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":77},{"text":"        fn get_range( start: *const IDxcSourceLocation, end: *const IDxcSourceLocation, location: *mut *mut IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"        fn get_default_diagnostic_display_options(value: *mut DxcDiagnosticDisplayOptions)  -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"        fn get_default_editing_tu_options(value: *mut DxcTranslationUnitFlags)  -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn create_unsaved_file(file_name: LPCSTR, contents: LPCSTR, content_length: u32 , result: *mut *mut IDxcUnsavedFile)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:526:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcIntelliSense,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcIntelliSenseVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":21440,"byte_end":22305,"line_start":526,"line_end":538,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":60},{"text":"        iid: IID_IDxcIntelliSense,","highlight_start":1,"highlight_end":35},{"text":"        vtable: IDxcIntelliSenseVtbl,","highlight_start":1,"highlight_end":38},{"text":"        fn create_index(index: *mut *mut IDxcIndex) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn get_null_location(location: *mut *mut  IDxcSourceLocation)  -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_null_range(location: *mut *mut  IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":77},{"text":"        fn get_range( start: *const IDxcSourceLocation, end: *const IDxcSourceLocation, location: *mut *mut IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"        fn get_default_diagnostic_display_options(value: *mut DxcDiagnosticDisplayOptions)  -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"        fn get_default_editing_tu_options(value: *mut DxcTranslationUnitFlags)  -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn create_unsaved_file(file_name: LPCSTR, contents: LPCSTR, content_length: u32 , result: *mut *mut IDxcUnsavedFile)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:526:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcIntelliSense,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcIntelliSenseVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"the calling convention \"stdcall\" is not supported on this target","code":{"code":"unsupported_fn_ptr_calling_conventions","explanation":null},"level":"warning","spans":[{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2891,"byte_end":2941,"line_start":95,"line_end":95,"column_start":22,"column_end":72,"is_primary":true,"text":[{"text":"            $($func: extern \"stdcall\" fn(*const $iface, $($t),*) -> $rt),*","highlight_start":22,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":4185,"byte_end":4426,"line_start":141,"line_end":148,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        com_interface! {","highlight_start":9,"highlight_end":25},{"text":"            $(#[$iface_attr])*","highlight_start":1,"highlight_end":31},{"text":"            interface $iface: $base_iface {","highlight_start":1,"highlight_end":44},{"text":"                iid: $iid,","highlight_start":1,"highlight_end":27},{"text":"                vtable: $vtable,","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fn_attr])* fn $func($($i: $t),*) -> $rt;)*","highlight_start":1,"highlight_end":66},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs","byte_start":21440,"byte_end":22305,"line_start":526,"line_end":538,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"com_interface! {","highlight_start":1,"highlight_end":17},{"text":"    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {","highlight_start":1,"highlight_end":60},{"text":"        iid: IID_IDxcIntelliSense,","highlight_start":1,"highlight_end":35},{"text":"        vtable: IDxcIntelliSenseVtbl,","highlight_start":1,"highlight_end":38},{"text":"        fn create_index(index: *mut *mut IDxcIndex) -> HRESULT;","highlight_start":1,"highlight_end":64},{"text":"        fn get_null_location(location: *mut *mut  IDxcSourceLocation)  -> HRESULT;","highlight_start":1,"highlight_end":83},{"text":"        fn get_null_range(location: *mut *mut  IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":77},{"text":"        fn get_range( start: *const IDxcSourceLocation, end: *const IDxcSourceLocation, location: *mut *mut IDxcSourceRange)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"        fn get_default_diagnostic_display_options(value: *mut DxcDiagnosticDisplayOptions)  -> HRESULT;","highlight_start":1,"highlight_end":104},{"text":"        fn get_default_editing_tu_options(value: *mut DxcTranslationUnitFlags)  -> HRESULT;","highlight_start":1,"highlight_end":92},{"text":"        fn create_unsaved_file(file_name: LPCSTR, contents: LPCSTR, content_length: u32 , result: *mut *mut IDxcUnsavedFile)  -> HRESULT;","highlight_start":1,"highlight_end":138},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"com_interface!","def_site_span":{"file_name":"/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/com-rs-0.2.1/src/macros.rs","byte_start":2354,"byte_end":2380,"line_start":78,"line_end":78,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! com_interface {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the calling convention \"stdcall\" is not supported on this target\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/donaldjordan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hassle-rs-0.9.0/src/intellisense/ffi.rs:526:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcom_interface! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    interface IDxcIntelliSense: IDxcUnknownShim, IUnknown {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        iid: IID_IDxcIntelliSense,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        vtable: IDxcIntelliSenseVtbl,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #130260 <https://github.com/rust-lang/rust/issues/130260>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `com_interface` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
